#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(plotly)
data(iris)
force(iris)

# Define server logic required to draw a histogram
shinyServer(function(input, output) {
  new_func <- reactive({
    validate(
      need(length(input$field) == 2,  "Select only two elements")
    )
  })
  
  selected_val <- observeEvent(input$field, {
    new_func()
    output$howTo <- renderText("This is just to plot the graph between different properties of \n IRIS data set. In this 
                               you can select any two properties. While the third axis is designed to capture the species details. Along with that
                               You can select the other tab to view stats like mean or summary generated by the R command ```summary```")
    output$resp <- renderText(paste("All ok! Columns are", input$field[1],
                                    " and ", input$field[2]))
    a <- iris[input$field[1]][,1]
    b <- iris[input$field[2]][,1]
    print(length(input$field))
    output$distPlot <- renderPlotly({
      
      plot_ly(iris,  x= a, y= b, z = iris$Species,
              
              type = "scatter3d", mode = "markers", color = iris$Species)
    })
    # print(input$compare)
    # if (input$compare == "mean"){
    # output$mytab <- renderTable({
    #   colMeans(iris[,c(1:4)], na.rm=TRUE)
    # }, rownames=TRUE)
    # } else {
    #   output$mytab <- renderTable({summary(iris)}, 
    #                             rownames = TRUE)
    # }
    
  })
  
  new_choice <- observeEvent(input$compare,
                             {
                               print(input$compare)
                               if (input$compare == "mean"){
                                 output$mytab <- renderTable({
                                   t(colMeans(iris[,input$field], na.rm=TRUE))
                                 })
                               } else {
                                 output$mytab <- renderTable({t(summary(iris[,input$field]))})
                               }
                             })
  
})
  
